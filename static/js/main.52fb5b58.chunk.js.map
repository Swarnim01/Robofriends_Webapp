{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robot.js","Searchbox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","height","src","alt","CardList","robot","CardArray","map","user","i","key","username","Searchbox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","filteredrobots","this","filter","toLowerCase","includes","style","overflowY","border","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCLSC,EAXF,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAOC,EAAgB,EAAhBA,MAAQC,EAAQ,EAARA,GAC3B,OACI,yBAAKC,UAAY,4DACb,yBAAKC,OAAS,SAAQC,IAAG,+BAA4BH,GAAMI,IAAO,WAClE,yBAAKH,UAAY,MACb,4BAAKH,GACL,2BAAIC,MCMLM,EAVE,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACTC,EAAYD,EAAME,KAAI,SAACC,EAAOC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAOL,EAAMI,GAAGV,GAAIA,GAAMM,EAAMI,GAAGV,GAAKF,KAAQQ,EAAMI,GAAGZ,KAAMC,MAAUO,EAAMI,GAAGX,WAEnG,OACI,6BACKQ,ICVAD,EAAQ,CACjB,CACEN,GAAI,EACJF,KAAM,gBACNc,SAAU,UACVb,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,gBACNc,SAAU,UACVb,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,gBACNc,SAAU,UACVb,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNc,SAAU,WACVb,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNc,SAAU,SACVb,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNc,SAAU,mBACVb,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNc,SAAU,eACVb,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNc,SAAU,gBACVb,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNc,SAAU,WACVb,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNc,SAAU,iBACVb,MAAO,2BChDEc,EATG,SAAC,GAClB,IADmBC,EACpB,EADoBA,aAEhB,OAAO,yBAAKb,UAAY,OACpB,2BAAOA,UAAY,kDACnBc,KAAO,SAASC,YAAc,gBAAgBC,SAAYH,MCwBnDI,E,kDAxBX,aACC,IAAD,8BACI,gBAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAcF,EAAMG,OAAOC,SAN3C,EAAKC,MAAQ,CACTnB,MAAOA,EACPgB,YAAa,IAJrB,E,qDAWS,IAAD,OACEI,EAAiBC,KAAKF,MAAMnB,MAAMsB,QAAO,SAAAtB,GAC3C,OAAOA,EAAMR,KAAK+B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEpE,OAAO,yBAAK5B,UAAY,MACpB,2CACJ,kBAAC,EAAD,CAAWa,aAAgBa,KAAKR,iBAC/B,yBAAKY,MAAS,CAACC,UAAU,SAAW9B,OAAS,QAAS+B,OAAQ,oBAC/D,kBAAC,EAAD,CAAU3B,MAASoB,U,GArBTQ,aCElBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAAkB,6BAChB,kBAAC,EAAD,OADF,KACoCC,SAASC,eAAe,SN0HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.52fb5b58.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ name , email , id}) => {\r\n    return(\r\n        <div className = \"bg-light-green  black dib br4 pa1 ma2 bw2 shadow-5 grow \">\r\n            <img height = \"200rem\"src = {`https://robohash.org/${id}`} alt  = \"Robots\"/>\r\n            <div className = \"tc\">\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robot}) =>{\r\n    const CardArray = robot.map((user , i) => {\r\n        return(<Card key = {robot[i].id} id = {robot[i].id}  name = {robot[i].name} email = { robot[i].email }/>)\r\n    })\r\n    return(\r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","export const robot = [\r\n    {\r\n      id: 1,\r\n      name: 'Swarnim Gupta',\r\n      username: 'Swarnim',\r\n      email: 'swarnimgupta123@gmail.com'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Swapnil Gupta',\r\n      username: 'Swapnil',\r\n      email: 'swapnilguptas0@gmail.com'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Suwarna Gupta',\r\n      username: 'Suwarna',\r\n      email: 'suwarnagupta987@gmail.com'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react';\r\n\r\nconst Searchbox = ({searchChange}) =>\r\n{\r\n    return(<div className = 'ma2'>\r\n        <input className = 'pa3 bg-light-green b--light-purple br3 shadow-4' \r\n        type = 'Search' placeholder = 'Search Robots' onChange = {searchChange}/>\r\n    </div>\r\n    \r\n    );\r\n}\r\nexport default Searchbox;","import React ,{ Component }from 'react';\r\nimport CardList from './CardList';\r\nimport { robot } from './robot';\r\nimport Searchbox from './Searchbox';\r\n\r\nclass App extends Component{\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state = {\r\n            robot: robot,\r\n            searchfield: ''\r\n        }\r\n    }\r\n    onSearchChange = (event) =>{\r\n        this.setState({ searchfield : event.target.value})\r\n       \r\n    }\r\n    render(){\r\n        const filteredrobots = this.state.robot.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return(<div className = 'tc'>\r\n            <h1>Robofriends</h1>\r\n        <Searchbox searchChange = {this.onSearchChange} />\r\n         <div style = {{overflowY:\"scroll\" , height : \"610px\", border: \"1px solid black\"}}>\r\n        <CardList robot = {filteredrobots}/></div>\r\n        </div>);\r\n    }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode><div> \n    <App /></div> </React.StrictMode>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}